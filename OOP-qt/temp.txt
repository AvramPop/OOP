

//void GenesGUI::connectSignalsAndSlots()
//{
//    // when the vector of genes is updated - re-populate the list
//    //QObject::connect(this, SIGNAL(genesUpdatedSignal()), this, SLOT(populateGenesList()));
//    QObject::connect(this, &GenesGUI::genesUpdatedSignal, this, &GenesGUI::populateGenesList);

//    // add a connection: function listItemChanged() will be called when an item in the list is selected
//    QObject::connect(this->genesList, &QListWidget::itemSelectionChanged, this, [this]() {this->listItemChanged(); });

//    // add button connections
//    QObject::connect(this->addGeneButton, &QPushButton::clicked, this, &GenesGUI::addGeneButtonHandler);
//    QObject::connect(this->deleteGeneButton, &QPushButton::clicked, this, &GenesGUI::deleteGeneButtonHandler);

//    // connect the addGene signal to the addGene slot, which adds a gene to vector
//    QObject::connect(this, SIGNAL(addGeneSignal(const std::string&, const std::string&, const std::string&)),
//                        this, SLOT(addGene(const std::string&, const std::string&, const std::string&)));
//}

//void GenesGUI::addGene(const std::string& geneName, const std::string& organismName, const std::string& sequence)
//{
//    this->genes.push_back(Gene{ geneName, organismName, sequence });

//    // emit the signal: the genes were updated
//    emit genesUpdatedSignal();
//}

//void GenesGUI::addGeneButtonHandler()
//{
//    // read data from the textboxes and add the new gene
//    QString organismName = this->organismEdit->text();
//    QString geneName = this->geneNameEdit->text();
//    QString sequence = this->sequenceEdit->toPlainText();

//    // emit the addGene signal
//    emit addGeneSignal(geneName.toStdString(), organismName.toStdString(), sequence.toStdString());
//}

//void GenesGUI::deleteGeneButtonHandler()
//{
//    // get the selected index and delete the gene
//    int idx = this->getSelectedIndex();

//    if (idx < 0 || idx >= this->genes.size())
//        return;

//    this->genes.erase(this->genes.begin() + idx);

//    // emit the signal: the genes were updated
//    emit genesUpdatedSignal();
//}



//int GenesGUI::getSelectedIndex()
//{
//    if (this->genesList->count() == 0)
//        return -1;

//    // get selected index
//    QModelIndexList index = this->genesList->selectionModel()->selectedIndexes();
//    if (index.size() == 0)
//    {
//        this->organismEdit->clear();
//        this->geneNameEdit->clear();
//        this->sequenceEdit->clear();
//        return -1;
//    }

//    int idx = index.at(0).row();
//    return idx;
//}

//void GenesGUI::listItemChanged()
//{
//    int idx = this->getSelectedIndex();
//    if (idx == -1)
//        return;

//    // get the song at the selected index
//    if (idx >= this->genes.size())
//        return;
//    Gene g = this->genes[idx];

//    this->organismEdit->setText(QString::fromStdString(g.getOrganismName()));
//    this->geneNameEdit->setText(QString::fromStdString(g.getName()));
//    this->sequenceEdit->setText(QString::fromStdString(g.getSequence()));
//}
